{
  "openapi": "3.0.0",
  "info": {
    "description": "This is the interface for interacting with the [Asana Platform](https://asana.com/developers/).",
    "title": "Asana",
    "termsOfService": "https://asana.com/terms",
    "contact": {
      "name": "Asana Support",
      "url": "https://asana.com/support"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://app.asana.com/api/{version}",
      "description": "Main endpoint.",
      "variables": {
        "version": {
          "default": "1.0",
          "enum": [
            "1.0"
          ],
          "description": "The version of the API to use."
        }
      }
    }
  ],
  "security": [
    {
      "personalAccessToken": []
    },
    {
      "oauth2": []
    }
  ],
  "tags": [
    {
      "name": "Attachments",
      "description": "An *attachment* object represents any file attached to a task in Asana, whether it\u2019s an uploaded file or one associated via a third-party service such as Dropbox or Google Drive."
    },
    {
      "name": "Batch API",
      "description": "The Batch API allows for making multiple requests in parallel to Asana's API."
    },
    {
      "name": "Custom Fields",
      "description": "Custom Fields store the metadata that is used in order to add user-specified information to tasks in Asana."
    },
    {
      "name": "Custom Field Settings",
      "description": "Custom Fields Settings objects represent the many-to-many join of the Custom Field and Project as well as stores information that is relevant to that particular pairing."
    },
    {
      "name": "Events",
      "description": "An event is an object representing a change to a resource that was observed by an event subscription."
    },
    {
      "name": "Organization Exports",
      "description": "An *organization_export* object represents a request to export the complete data of an Organization in JSON format."
    },
    {
      "name": "Projects",
      "description": "A `project` represents a prioritized list of tasks in Asana or a board with columns of tasks represented as cards. It exists in a single workspace or organization and is accessible to a subset of users in that workspace or organization, depending on its permissions."
    },
    {
      "name": "Project Memberships",
      "description": "With the introduction of \u201ccomment-only\u201d projects in Asana, a user\u2019s membership in a project comes with associated permissions. These permissions (whether a user has full access to the project or comment-only access) are accessible through the project memberships endpoints described here."
    },
    {
      "name": "Sections",
      "description": "A *section* is a subdivision of a project that groups tasks together."
    },
    {
      "name": "Stories",
      "description": "A story represents an activity associated with an object in the Asana system."
    },
    {
      "name": "Tags",
      "description": "A tag is a label that can be attached to any task in Asana. It exists in a single workspace or organization."
    },
    {
      "name": "Tasks",
      "description": "The task is the basic object around which many operations in Asana are centered."
    },
    {
      "name": "Team",
      "description": "A *team* is used to group related projects and people together within an organization. Each project in an organization is associated with a team."
    },
    {
      "name": "Typeahead",
      "description": "The typeahead search API provides search for objects from a single workspace."
    },
    {
      "name": "Users",
      "description": "A user object represents an account in Asana that can be given access to various workspaces, projects, and tasks."
    },
    {
      "name": "Webhooks",
      "description": "Webhooks allow an application to be notified of changes in Asana."
    },
    {
      "name": "Workspaces",
      "description": "A workspace is the highest-level organizational unit in Asana. An organization is a special kind of workspace that represents a company."
    }
  ],
  "components": {
    "parameters": {
      "expand": {
        "name": "opt_expand",
        "in": "query",
        "description": "Query results and sub-objects are returned in compact form by default. This option can be used to expand query results or sub-objects to return more detailed information. Be sure you really need the information in the expanded form, as executing a query with many results in expanded form can be costly and return you a lot of data to consume.\nIf the fields option is also used, it will take precedence over the expand option and prevent expansion.",
        "example": [
          "followers"
        ],
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "style": "form",
        "explode": false
      },
      "fields": {
        "name": "opt_fields",
        "in": "query",
        "description": "Some requests return *compact* representations of objects, to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.\nThe id of included objects will always be returned, regardless of the field options.",
        "example": [
          "followers",
          "assignee"
        ],
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "style": "form",
        "explode": false
      },
      "pretty": {
        "name": "opt_pretty",
        "in": "query",
        "description": "Provides the response in \u201cpretty\u201d output. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.",
        "required": false,
        "allowEmptyValue": true,
        "schema": {
          "type": "boolean"
        },
        "style": "form"
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "The number of objects to return per page. The value must be between 1 and 100.",
        "example": 50,
        "schema": {
          "type": "integer"
        }
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.\n'Note: You can only pass in an offset that was returned to you via a previously paginated request.'",
        "example": "eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9",
        "schema": {
          "type": "string"
        }
      },
      "archived-query-param": {
        "name": "archived",
        "in": "query",
        "description": "Only return projects whose `archived` field takes on the value of this parameter.",
        "schema": {
          "type": "boolean"
        },
        "example": false
      },
      "project-path-id": {
        "name": "project-id",
        "in": "path",
        "description": "Globally unique identifier for the project.",
        "required": true,
        "schema": {
          "type": "integer"
        },
        "example": 1331
      },
      "section-path-id": {
        "name": "section-id",
        "in": "path",
        "required": true,
        "description": "The globally unique identified for the section.",
        "schema": {
          "type": "integer"
        },
        "example": 321654
      },
      "tag-path-id": {
        "name": "tag-id",
        "in": "path",
        "description": "Globally unique identifier for the tag.",
        "required": true,
        "schema": {
          "type": "integer"
        },
        "example": 11235
      },
      "task-path-id": {
        "name": "task-id",
        "in": "path",
        "required": true,
        "description": "The task to operate on.",
        "schema": {
          "type": "integer"
        },
        "example": 321654
      },
      "team-path-id": {
        "name": "team-id",
        "in": "path",
        "description": "Globally unique identifier for the team.",
        "required": true,
        "schema": {
          "type": "integer"
        },
        "example": 159874
      },
      "user-query-param": {
        "name": "user",
        "in": "query",
        "description": "The user to filter results on.",
        "schema": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "string",
              "enum": [
                "me"
              ]
            },
            {
              "type": "string",
              "format": "email"
            }
          ]
        },
        "examples": {
          "id": {
            "summary": "A globally unique identifier for the user",
            "value": 14641
          },
          "me": {
            "summary": "The keyword 'me' to indicate the current user making the request.",
            "value": "me"
          },
          "email": {
            "summary": "An email address for a user",
            "value": "sashimi@asana.com"
          }
        }
      },
      "workspace-path-id": {
        "name": "workspace-id",
        "in": "path",
        "description": "Globally unique identifier for the workspace or organization.",
        "required": true,
        "schema": {
          "type": "integer"
        },
        "example": 12345
      }
    },
    "responses": {
      "GenericErrorResponse": {
        "description": "Sadly, sometimes requests to the API are not successful. Failures can occur for a wide range of reasons. In all cases, the API should return an HTTP Status Code that indicates the nature of the failure, with a response body in JSON format containing additional information.\nIn the event of a server error the response body will contain an error phrase. These phrases are automatically generated using the [node-asana-phrase library](https://github.com/Asana/node-asana-phrase) and can be used by Asana support to quickly look up the incident that caused the server error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadRequest": {
        "description": "This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "A valid authentication token was not provided with the request, so the API could not associate a user with the request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PaymentRequired": {
        "description": "The request was valid, but the queried object or object mutation specified in the request is only available to premium organizations and workspaces."
      },
      "Forbidden": {
        "description": "The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "You have exceeded one of the enforced rate limits in the API. See the [documentation on rate limiting](https://asana.com/developers/documentation/getting-started/rate-limits) for more information.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "There was a problem on Asana\u2019s end.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "AsanaObject": {
        "description": "A generic Asana Object, containing a globally unique identifier.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Globally unique ID of the object.",
            "type": "integer",
            "readOnly": true,
            "example": 12345
          }
        }
      },
      "AsanaNamedObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the object.",
                "type": "string",
                "example": "Bug Task"
              }
            }
          }
        ]
      },
      "AsanaObjectArray": {
        "description": "A generic list of objects, such as those returned by the typeahead search endpoint.",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AsanaNamedObject"
            }
          }
        }
      },
      "Attachment": {
        "description": "An *attachment* object represents any file attached to a task in Asana, whether it\u2019s an uploaded file or one associated via a third-party service such as Dropbox or Google Drive.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "created_at": {
                "description": "The time at which this attachment was uploaded.",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2012-02-22T02:06:58.147Z"
              },
              "download_url": {
                "description": "The URL containing the content of the attachment.\n**Note:** May be null if the attachment is hosted by [Box](https://www.box.com/). If present, this URL may only be valid for 1 hour from the time of retrieval. You should avoid persisting this URL somewhere and just refresh it on demand to ensure you do not keep stale URLs.",
                "type": "string",
                "nullable": true,
                "format": "uri",
                "readOnly": true,
                "example": "https://www.dropbox.com/s/123/Screenshot.png?dl=1"
              },
              "host": {
                "description": "The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive` and `box`.",
                "type": "string",
                "readOnly": true,
                "example": "dropbox"
              },
              "name": {
                "description": "The name of the file.",
                "type": "string",
                "readOnly": true,
                "example": "Screenshot.png"
              },
              "parent": {
                "description": "The task this attachment is attached to.",
                "readOnly": true,
                "$ref": "#/components/schemas/Task"
              },
              "view_url": {
                "description": "The URL where the attachment can be viewed, which may be friendlier to users in a browser than just directing them to a raw file. May be null if no view URL exists for the service.",
                "type": "string",
                "readOnly": true,
                "nullable": true,
                "example": "https://www.dropbox.com/s/123/Screenshot.png"
              }
            }
          }
        ]
      },
      "AttachmentObject": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Attachment"
          }
        }
      },
      "AttachmentArray": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          }
        }
      },
      "BatchRequest": {
        "description": "A request object for use in a batch request.",
        "type": "object",
        "properties": {
          "relative_path": {
            "description": "The path of the desired endpoint relative to the API\u2019s base URL. Query parameters are not accepted here; put them in `data` instead.",
            "type": "string",
            "example": "/tasks/123"
          },
          "method": {
            "description": "The HTTP method you wish to emulate for the action.",
            "type": "string",
            "enum": [
              "get",
              "post",
              "put",
              "delete",
              "patch",
              "head"
            ],
            "example": "get"
          },
          "data": {
            "description": "For `GET` requests, this should be a map of query parameters you would have normally passed in the URL. Options and pagination are not accepted here; put them in `options` instead. For `POST`, `PATCH`, and `PUT` methods, this should be the content you would have normally put in the data field of the body.",
            "type": "object",
            "example": {
              "assignee": "me",
              "workspace": 1337
            }
          },
          "options": {
            "description": "Pagination (`limit` and `offset`) and output options (`fields` or `expand`) for the action. \u201cPretty\u201d JSON output is not an available option on individual actions; if you want pretty output, specify that option on the parent request.",
            "type": "object",
            "properties": {
              "limit": {
                "description": "Pagination limit for the request.",
                "type": "integer",
                "example": 50
              },
              "offset": {
                "description": "Pagination offset for the request.",
                "type": "integer",
                "example": "eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9"
              },
              "fields": {
                "description": "The fields to retrieve in the request.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "name",
                  "id",
                  "notes",
                  "completed"
                ]
              },
              "expand": {
                "description": "The expansion path for the request.",
                "type": "string",
                "example": ".subtasks"
              }
            },
            "example": {
              "limit": 3,
              "fields": [
                "name",
                "notes",
                "completed"
              ]
            }
          }
        },
        "required": [
          "relative_path",
          "method"
        ]
      },
      "BatchResponse": {
        "description": "A response object returned from a batch request.",
        "type": "object",
        "properties": {
          "status_code": {
            "description": "The HTTP status code that the invoked endpoint returned.",
            "type": "integer",
            "example": 200
          },
          "headers": {
            "description": "A map of HTTP headers specific to this result. This is primarily used for returning a `Location` header to accompany a `201 Created` result.  The parent HTTP response will contain all common headers.",
            "type": "object",
            "example": {
              "location": "/tasks/1234"
            }
          },
          "body": {
            "description": "The JSON body that the invoked endpoint returned.",
            "type": "object",
            "example": {
              "data": {
                "id": 1967,
                "completed": false,
                "name": "Hello, world!",
                "notes": "How are you today?"
              }
            }
          }
        }
      },
      "CustomField": {
        "description": "Custom Fields store the metadata that is used in order to add\nuser-specified information to tasks in Asana. Be sure to reference the\nCustom Fields developer documentation for more information about how\ncustom fields relate to various resources in Asana.\n\nSince custom fields can be defined for one of a number of types, and\nthese types have different data and behaviors, there are fields that are\nrelevant to a particular type. For instance, as noted above, enum_options\nis only relevant for the enum type and defines the set of choices that\nthe enum could represent.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the custom field.",
                "type": "string",
                "example": "Priority"
              },
              "description": {
                "description": "The description of the custom field.",
                "type": "string",
                "example": "Development team priority"
              },
              "type": {
                "description": "The type of the custom field.",
                "type": "string",
                "enum": [
                  "text",
                  "enum",
                  "number"
                ],
                "example": "enum"
              },
              "enum_options": {
                "description": "Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](https://asana.com/developers/api-reference/custom_fields#enum-options).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnumOption"
                }
              },
              "precision": {
                "description": "Only relevant for custom fields of type \u2018Number\u2019. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.",
                "type": "integer",
                "example": 2
              }
            }
          }
        ]
      },
      "CustomFieldObject": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CustomField"
          }
        }
      },
      "CustomFieldArray": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          }
        }
      },
      "CustomFieldSettings": {
        "description": "Custom fields are attached to a particular project with the Custom Field Settings resource. This resource both represents the many-to-many join of the Custom Field and Project as well as stores information that is relevant to that particular pairing; for instance, the is_important property determines some possible application-specific handling of that custom field.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "created_at": {
                "description": "The time at which this custom field was created.",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2012-02-22T02:06:58.147Z"
              },
              "is_important": {
                "description": "`is_important` is a flag that can be used in application-defined behavior: for instance, in the Asana web application, is_important is used to determine if this custom field on this project is displayed in a column when viewed in the project list.",
                "type": "boolean",
                "readOnly": true,
                "example": false
              },
              "project": {
                "description": "The id of the project that this custom field settings refers to.",
                "readOnly": true,
                "$ref": "#/components/schemas/Project"
              },
              "custom_field": {
                "description": "The custom field that this custom field settings refers to.",
                "readOnly": true,
                "$ref": "#/components/schemas/CustomField"
              }
            }
          }
        ]
      },
      "CustomFieldSettingsArray": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldSettings"
            }
          }
        }
      },
      "DependencyArray": {
        "description": "A set of task dependencies.",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "dependencies": {
                "description": "An array of task IDs that a task should depend on.",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "dependencies": [
              133713,
              184253
            ]
          }
        }
      },
      "DependentArray": {
        "description": "A set of dependent tasks.",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "dependents": {
                "description": "An array of task IDs that are dependents of the given task.",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "dependents": [
              133713,
              184253
            ]
          }
        }
      },
      "EmptyObject": {
        "description": "An empty object.",
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          }
        }
      },
      "EnumOption": {
        "description": "Enum options are the possible values which an enum custom field can\nadopt. An enum custom field must contain at least 1 enum option but no\nmore than 50.\n\nYou can add enum options to a custom field by using the `POST\n/custom_fields/custom-field-id/enum_options` endpoint.\n\n**It is not possible to remove or delete an enum option**. Instead, enum\noptions can be disabled by updating the `enabled` field to false with the\n`PUT /enum_options/enum_option-id` endpoint. Other attributes can be\nupdated similarly.\n\nOn creation of an enum option, `enabled` is always set to `true`, meaning\nthe enum option is a selectable value for the custom field. Setting\n`enabled=false` is equivalent to \u201ctrashing\u201d the enum option in the Asana\nweb app within the \u201cEdit Fields\u201d dialog. The enum option will no longer\nbe selectable but, if the enum option value was previously set within a\ntask, the task will retain the value.\n\nEnum options are an ordered list and by default new enum options are\ninserted at the end. Ordering in relation to existing enum options can be\nspecified on creation by using `insert_before` or `insert_after` to\nreference an existing enum option. Only one of `insert_before` and\n`insert_after` can be provided when creating a new enum option.\n\nAn enum options list can be reordered with the `POST\n/custom_fields/custom-field-id/enum_options/insert` endpoint.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the enum option.",
                "type": "string",
                "example": "Low"
              },
              "enabled": {
                "description": "The color of the enum option. Defaults to \u2018none\u2019.",
                "type": "boolean",
                "example": true
              },
              "color": {
                "description": "Whether or not the enum option is a selectable value for the custom field.",
                "type": "string",
                "example": "blue"
              }
            }
          }
        ]
      },
      "Error": {
        "description": "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Message providing more detail about the error that occurred, if available.",
                  "example": "project: Missing input"
                },
                "phrase": {
                  "type": "string",
                  "readOnly": true,
                  "description": "**500 errors only**. A unique error phrase which can be used when contacting developer support to help identify the exact occurrence of the problem in Asana\u2019s logs.",
                  "example": "6 sad squid snuggle softly"
                }
              }
            }
          }
        }
      },
      "Event": {
        "description": "An *event* is an object representing a change to a resource that was\nobserved by an event subscription.\n\nIn general, requesting events on a resource is faster and subject to\nhigher rate limits than requesting the resource itself. Additionally,\nchange events bubble up - listening to events on a project would include\nwhen stories are added to tasks in the project, even on subtasks.\n\nEstablish an initial sync token by making a request with no sync token.\nThe response will be a `412` error - the same as if the sync token had\nexpired.\n\nSubsequent requests should always provide the sync token from the\nimmediately preceding call.\n\nSync tokens may not be valid if you attempt to go \u2018backward\u2019 in the\nhistory by requesting previous tokens, though re-requesting the current\nsync token is generally safe, and will always return the same results.\n\nWhen you receive a `412 Precondition Failed` error, it means that the\nsync token is either invalid or expired. If you are attempting to keep a\nset of data in sync, this signals you may need to re-crawl the data.\n\nSync tokens always expire after 24 hours, but may expire sooner,\ndepending on load on the service.",
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "The user who triggered the event.\n\n**Note**: The event may be triggered by a different user than the\nsubscriber. For example, if user A subscribes to a task and user B\nmodified it, the event\u2019s user will be user B. Note: Some events are\ngenerated by the system, and will have `null` as the user. API\nconsumers should make sure to handle this case.",
            "readOnly": true,
            "nullable": true
          },
          "resource": {
            "description": "The resource the event occurred on.\n\n**Note**: The resource that triggered the event may be different from\nthe one that the events were requested for. For example, a\nsubscription to a project will contain events for tasks contained\nwithin the project.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "id": {
                "type": "integer",
                "example": 12345
              },
              "name": {
                "type": "string",
                "example": "Bug Task"
              }
            }
          },
          "type": {
            "description": "The type of the resource that generated the event.\n\n**Note**: Currently, only tasks, projects and stories generate\nevents.",
            "type": "string",
            "readOnly": true,
            "example": "task"
          },
          "action": {
            "description": "The type of action taken that triggered the event.",
            "type": "string",
            "readOnly": true,
            "example": "changed"
          },
          "parent": {
            "description": "For added/removed events, the parent that resource was added to or removed from. The parent will be `null` for other event types.",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 12345
              },
              "name": {
                "type": "string",
                "example": "Bugs"
              }
            },
            "readOnly": true,
            "nullable": true
          },
          "created_at": {
            "description": "The timestamp when the event occurred.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2012-02-22T02:06:58.147Z"
          }
        }
      },
      "EventArray": {
        "description": "The full record for all events that have occurred since the sync token was created.",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "sync": {
            "description": "A sync token to be used with the next call to the events endpoint.",
            "type": "string",
            "example": "de4774f6915eae04714ca93bb2f5ee81"
          }
        }
      },
      "OrganizationExport": {
        "description": "An *organization_export* object represents a request to export the\ncomplete data of an Organization in JSON format.\n\nTo export an Organization using this API:\n\n* Create an `organization_export`\n  [request](https://asana.com/developers/api-reference/organization_exports#create)\n  and store the id that is returned.\n* Request the `organization_export` every few minutes, until the `state`\n  field contains \u2018finished\u2019.\n* Download the file located at the URL in the `download_url` field.\n* Exports can take a long time, from several minutes to a few hours for\n  large Organizations.\n\n**Note**: These endpoints are only available to [Service\nAccounts](https://asana.com/guide/help/premium/service-accounts) of an\n[Enterprise](https://asana.com/enterprise) Organization.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "created_at": {
                "description": "The time at which this export was requested.",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2012-02-22T02:06:58.147Z"
              },
              "download_url": {
                "description": "Download this URL to retreive the full export of the organization\nin JSON format. It will be compressed in a gzip (.gz) container.\n\n**Note**: May be null if the export is still in progress or\nfailed.  If present, this URL may only be valid for 1 hour from\nthe time of retrieval. You should avoid persisting this URL\nsomewhere and rather refresh on demand to ensure you do not keep\nstale URLs.",
                "type": "string",
                "format": "uri",
                "readOnly": true,
                "nullable": true,
                "example": "https://asana-export.s3.amazonaws.com/export-4632784536274-20170127-43246.json.gz?AWSAccessKeyId=xxxxxxxx"
              },
              "state": {
                "description": "The current state of the export.",
                "type": "string",
                "enum": [
                  "pending",
                  "started",
                  "finished",
                  "error"
                ],
                "readOnly": true,
                "example": "started"
              },
              "organization": {
                "description": "**Create-only**: The Organization that is being exported. This can only be specified at create time.",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 14916
                  },
                  "name": {
                    "type": "string",
                    "example": "My Workspace"
                  }
                }
              }
            }
          }
        ]
      },
      "OrganizationExportObjectResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrganizationExport"
          }
        }
      },
      "Project": {
        "description": "A *project* represents a prioritized list of tasks in Asana or a board\nwith columns of tasks represented as cards. It exists in a single\nworkspace or organization and is accessible to a subset of users in that\nworkspace or organization, depending on its permissions.\n\nProjects in organizations are shared with a single team. You cannot\ncurrently change the team of a project via the API. Non-organization\nworkspaces do not have teams and so you should not specify the team of\nproject in a regular workspace.\n\nFollowers of a project are a subset of the members of that project.\nFollowers of a project will receive all updates including tasks created,\nadded and removed from that project. Members of the project have access\nto and will receive status updates of the project. Adding followers to a\nproject will add them as members if they are not already, removing\nfollowers from a project will not affect membership.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.",
                "type": "string",
                "example": "Stuff to buy"
              },
              "archived": {
                "description": "True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.",
                "type": "boolean",
                "example": false
              },
              "color": {
                "description": "Color of the project.",
                "type": "string",
                "enum": [
                  "dark-pink",
                  "dark-green",
                  "dark-blue",
                  "dark-red",
                  "dark-teal",
                  "dark-brown",
                  "dark-orange",
                  "dark-purple",
                  "dark-warm-gray",
                  "light-pink",
                  "light-green",
                  "light-blue",
                  "light-red",
                  "light-teal",
                  "light-brown",
                  "light-orange",
                  "light-purple",
                  "light-warm-gray"
                ],
                "example": "light-green"
              },
              "created_at": {
                "description": "The time at which this project was created.",
                "type": "string",
                "format": "date-time",
                "example": "2012-02-22T02:06:58.147Z"
              },
              "current_status": {
                "description": "A description of the project\u2019s status containing a color (must be either null or one of: `green`, `yellow`, `red`) and a short description.",
                "type": "object",
                "nullable": true,
                "properties": {
                  "color": {
                    "type": "string",
                    "enum": [
                      "green",
                      "yellow",
                      "red"
                    ],
                    "example": "green"
                  },
                  "text": {
                    "type": "string",
                    "example": "All gravy!"
                  },
                  "author": {
                    "$ref": "#/components/schemas/User"
                  }
                },
                "example": {
                  "color": "green",
                  "text": "Everything is great",
                  "author": {
                    "id": 12345,
                    "name": "Greg Bizarro"
                  }
                }
              },
              "custom_field_settings": {
                "description": "Array of Custom Field Settings (in compact form).",
                "readOnly": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomFieldSettings"
                }
              },
              "due_date": {
                "description": "The day on which this project is due. This takes a date with format YYYY-MM-DD.",
                "type": "string",
                "format": "date-time",
                "example": "2012-03-26"
              },
              "followers": {
                "description": "Array of users following this project. Followers are a subset of members who receive all notifications for a project, the default notification setting when adding members to a project in-product.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                },
                "readOnly": true
              },
              "layout": {
                "description": "The layout (board or list view) of a project",
                "type": "string",
                "enum": [
                  "list",
                  "board"
                ],
                "readOnly": true
              },
              "members": {
                "description": "Array of users who are members of this project.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                },
                "readOnly": true
              },
              "modified_at": {
                "description": "The time at which this project was last modified.\n**Note**: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.",
                "type": "string",
                "format": "date-time",
                "example": "2012-02-22T02:06:58.147Z"
              },
              "notes": {
                "description": "More detailed, free-form textual information associated with the project.",
                "type": "string",
                "example": "These are things we need to purchase."
              },
              "owner": {
                "description": "The current owner of the project, may be null.",
                "nullable": true,
                "$ref": "#/components/schemas/User"
              },
              "public": {
                "description": "True if the project is public to the organization. If false, do not share this project with other users in this organization without explicitly checking to see if they have access.",
                "type": "boolean",
                "example": false
              },
              "team": {
                "description": "**Create-only**. The team that this project is shared with. This field only exists for projects in organizations.",
                "$ref": "#/components/schemas/Team"
              },
              "workspace": {
                "description": "**Create-only**. The workspace or organization this project is associated with. Once created, projects cannot be moved to a different workspace. This attribute can only be specified at creation time.",
                "$ref": "#/components/schemas/Workspace"
              }
            }
          }
        ]
      },
      "ProjectObject": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Project"
          }
        }
      },
      "ProjectArray": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          }
        }
      },
      "ProjectMembership": {
        "description": "With the introduction of \u201ccomment-only\u201d projects in Asana, a user\u2019s membership in a project comes with associated permissions. These permissions (whether a user has full access to the project or comment-only access) are accessible through the project memberships endpoints described here.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/User"
              },
              "project": {
                "$ref": "#/components/schemas/Project"
              },
              "write_access": {
                "description": "Whether the user has full access to the project or has comment-only access.",
                "type": "string",
                "enum": [
                  "full_write",
                  "comment_only"
                ],
                "readOnly": true,
                "example": "full_write"
              }
            }
          }
        ]
      },
      "ProjectMembershipObject": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProjectMembership"
          }
        }
      },
      "ProjectMembershipArray": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMembership"
            }
          }
        }
      },
      "Section": {
        "description": "A *section* is a subdivision of a project that groups tasks together. It\ncan either be a header above a list of tasks in a list view or a column\nin a board view of a project.\n\nSections are largely a shared idiom in Asana\u2019s API for both list and\nboard views of a project regardless of the project\u2019s layout.\n\nThe \u2018memberships\u2019 property when [getting a\ntask](https://asana.com/developers/api-reference/tasks#get) will return\nthe information for the section or the column under \u2018section\u2019 in the\nresponse.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the section (i.e. the text displayed as the section header).",
                "type": "string",
                "example": "Next Actions"
              },
              "project": {
                "$ref": "#/components/schemas/Project",
                "description": "The project which contains the section.",
                "readOnly": true
              },
              "created_at": {
                "description": "The time at which the section was created.",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2012-02-22T02:06:58.147Z"
              }
            }
          }
        ]
      },
      "SectionObject": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Section"
          }
        }
      },
      "SectionArray": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Section"
            }
          }
        }
      },
      "Story": {
        "description": "A *story* represents an activity associated with an object in the Asana\nsystem. Stories are generated by the system whenever users take actions\nsuch as creating or assigning tasks, or moving tasks between projects.\n*Comments* are also a form of user-generated story.\n\nStories are a form of history in the system, and as such they are\nread-only. Once generated, it is not possible to modify a story.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "created_at": {
                "description": "Globally unique ID of the story.",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": 1234
              },
              "created_by": {
                "description": "The user who created the story.",
                "nullable": true,
                "readOnly": true,
                "$ref": "#/components/schemas/User"
              },
              "html_text": {
                "description": "HTML formatted text for a comment. This will not include the name\nof the creator.\n\n**Note**: This field is only returned if explicitly requested\nusing the `opt_fields` query parameter.",
                "type": "string",
                "example": "Get whatever Sashimi has."
              },
              "is_pinned": {
                "description": "Whether the story should be pinned on the resource.",
                "type": "boolean",
                "example": false
              },
              "liked": {
                "description": "True if the story is liked by the authorized user, false if not.\n\n**Note**: This property only exists for stories that provide\nlikes.",
                "type": "boolean",
                "readOnly": true,
                "example": false
              },
              "likes": {
                "description": "Array of users who have liked this story.\n\n**Note**: This property only exists for stories that provide\nlikes.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                },
                "readOnly": true
              },
              "num_likes": {
                "description": "The number of users who have liked this story.\n\n**Note**: This property only exists for stories that provide\nlikes.",
                "type": "integer",
                "readOnly": true,
                "example": 5
              },
              "source": {
                "description": "The component of the Asana product the user used to trigger the story.",
                "type": "string",
                "readOnly": true,
                "example": "web"
              },
              "target": {
                "description": "The object this story is associated with. Currently may only be a task.",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 1234
                  },
                  "name": {
                    "type": "string",
                    "example": "Bug Task"
                  }
                },
                "readOnly": true
              },
              "text": {
                "description": "**Create-only**. Human-readable text for the story or comment.\nThis will not include the name of the creator.\n\n**Note**: This is not guaranteed to be stable for a given type of\nstory. For example, text for a reassignment may not always say\n\u201cassigned to \u2026\u201d. The API currently does not provide a structured\nway of inspecting the meaning of a story.",
                "type": "string",
                "example": "marked today"
              },
              "type": {
                "description": "The type of story this is.",
                "type": "string",
                "readOnly": true,
                "example": "comment"
              }
            }
          }
        ]
      },
      "StoryObject": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Story"
          }
        }
      },
      "StoryArray": {
        "type": "object",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Story"
            }
          }
        }
      },
      "Tag": {
        "description": "A *tag* is a label that can be attached to any task in Asana. It exists\nin a single workspace or organization.\n\nTags have some metadata associated with them, but it is possible that we\nwill simplify them in the future so it is not encouraged to rely too\nheavily on it. Unlike projects, tags do not provide any ordering on the\ntasks they are associated with.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "created_at": {
                "description": "The time at which this tag was created.",
                "type": "string",
                "format": "date-time",
                "example": "2012-02-22T02:06:58.147Z"
              },
              "followers": {
                "description": "Array of users following this tag.",
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "name": {
                "description": "Name of the tag. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.",
                "type": "string",
                "example": "Stuff to buy"
              },
              "color": {
                "type": "string",
                "description": "Color of the tag.",
                "enum": [
                  "dark-pink",
                  "dark-green",
                  "dark-blue",
                  "dark-red",
                  "dark-teal",
                  "dark-brown",
                  "dark-orange",
                  "dark-purple",
                  "dark-warm-gray",
                  "light-pink",
                  "light-green",
                  "light-blue",
                  "light-red",
                  "light-teal",
                  "light-brown",
                  "light-orange",
                  "light-purple",
                  "light-warm-gray"
                ],
                "example": "light-green"
              },
              "notes": {
                "description": "More detailed, free-form textual information associated with the tag.",
                "type": "string",
                "example": "These are things we need to purchase."
              },
              "workspace": {
                "$ref": "#/components/schemas/Workspace"
              }
            }
          }
        ]
      },
      "TagObject": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Tag"
          }
        }
      },
      "TagArray": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "Task": {
        "description": "The *task* is the basic object around which many operations in Asana are\ncentered. In the Asana application, multiple tasks populate the middle\npane according to some view parameters, and the set of selected tasks\ndetermines the more detailed information presented in the details pane.\n\nA *section*, at its core, is a task whose name ends with the colon\ncharacter `:`. Sections are unique in that they will be included in the\n*memberships* field of task objects returned in the API when the task is\nwithin a section. They can also be used to manipulate the ordering of a\ntask within a project.\n\n[Queries](https://asana.com/developers/api-reference/tasks#query) return\na compact representation of each object which is typically the id and\nname fields. Interested in a specific set of fields or all of the fields?\nUse [field\nselectors](https://asana.com/developers/documentation/getting-started/input-output-options)\nto manipulate what data is included in a response.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "assignee": {
                "$ref": "#/components/schemas/User",
                "nullable": true
              },
              "assignee_status": {
                "description": "Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null.",
                "type": "string",
                "enum": [
                  "today",
                  "upcoming",
                  "later",
                  "new"
                ],
                "example": "upcoming"
              },
              "created_at": {
                "description": "The time at which this task was created.",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2012-02-22T02:06:58.147Z"
              },
              "completed": {
                "description": "True if the task is currently marked complete, false if not.",
                "type": "boolean",
                "example": false
              },
              "completed_at": {
                "description": "The time at which this task was completed, or null if the task is incomplete.",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "nullable": true,
                "example": "2012-02-22T02:06:58.147Z"
              },
              "custom_fields": {
                "description": "Array of custom fields applied to the task. These custom fields\nrepresent the values recorded on this task for a particular\ncustom field. For example, these fields will contain an\n`enum_value` property for custom fields of type `enum`, a\n`string_value` property for custom fields of type `string`, and\nso on. Please note that the `id` returned on each custom field\nvalue *is identical* to the `id` of the custom field, which\nallows referencing the custom field metadata through the\n`/custom_fields/custom_field-id` endpoint.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomField"
                },
                "example": [
                  {
                    "id": 1646,
                    "name": "Priority",
                    "type": "enum",
                    "enum_value": {
                      "id": 126,
                      "name": "P1"
                    }
                  }
                ]
              },
              "dependencies": {
                "description": "Array of resources referencing tasks that this task depends on. The objects contain only the ID of the dependency.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1234
                    }
                  }
                },
                "readOnly": true,
                "example": [
                  {
                    "id": 1234
                  },
                  {
                    "id": 4321
                  }
                ]
              },
              "dependents": {
                "description": "Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1234
                    }
                  }
                },
                "readOnly": true,
                "example": [
                  {
                    "id": 1234
                  },
                  {
                    "id": 4321
                  }
                ]
              },
              "due_on": {
                "description": "Date on which this task is due, or null if the task has no due date.  This takes a date with `YYYY-MM-DD` format and should not be used together with due_at.",
                "type": "string",
                "format": "date",
                "example": "2012-03-26",
                "nullable": true
              },
              "due_at": {
                "description": "Date and time on which this task is due, or null if the task has no due time. This takes a UTC timestamp and should not be used together with `due_on`.",
                "type": "string",
                "format": "date",
                "example": "2012-02-22T02:06:58.147Z",
                "nullable": true
              },
              "external": {
                "description": "**OAuth Required**. The external field allows you to store app-specific metadata on tasks, including an id that can be used to retrieve tasks and a data blob that can store app-specific character strings. Note that you will need to authenticate with Oauth to access or modify this data. Once an external id is set, you can use the notation `external:custom_id` to reference your object anywhere in the API where you may use the original object id. See the page on Custom External Data for more details.",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": "my_id"
                  },
                  "data": {
                    "type": "string",
                    "example": "A blob of information."
                  }
                },
                "example": {
                  "id": "my_id",
                  "data": "A blob of information"
                }
              },
              "followers": {
                "description": "Array of users following this task.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                },
                "example": [
                  {
                    "id": 1234,
                    "name": "Mittens"
                  }
                ]
              },
              "liked": {
                "description": "True if the task is liked by the authorized user, false if not.",
                "type": "boolean",
                "example": true
              },
              "likes": {
                "description": "Array of users who have liked this task.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                },
                "readOnly": true,
                "example": [
                  {
                    "id": 1234,
                    "name": "Mittens"
                  }
                ]
              },
              "memberships": {
                "description": "**Create-only**. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "project": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 1234
                        },
                        "name": {
                          "type": "string",
                          "example": "Bugs"
                        }
                      }
                    },
                    "section": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 1123
                        },
                        "name": {
                          "type": "string",
                          "example": "P1:"
                        }
                      }
                    }
                  }
                },
                "example": [
                  {
                    "project": {
                      "id": 1331,
                      "name": "Bugs"
                    },
                    "section": {
                      "id": 1123,
                      "name": "P1:"
                    }
                  }
                ]
              },
              "modified_at": {
                "description": "The time at which this task was last modified.\n\n**Note:** This does not currently reflect any changes in\nassociations such as projects or comments that may have been\nadded or removed from the task.",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2012-02-22T02:06:58.147Z"
              },
              "name": {
                "description": "Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.",
                "type": "string",
                "example": "Buy catnip"
              },
              "notes": {
                "description": "More detailed, free-form textual information associated with the task.",
                "type": "string",
                "example": "Mittens really likes the stuff from Humboldt."
              },
              "num_likes": {
                "description": "The number of users who have liked this task.",
                "type": "integer",
                "example": 5,
                "readOnly": true
              },
              "projects": {
                "description": "**Create-only.** Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Project"
                },
                "example": [
                  {
                    "id": 1331,
                    "name": "Stuff to buy"
                  }
                ]
              },
              "parent": {
                "description": "The parent of this task, or `null` if this is not a subtask. This property cannot be modified using a `PUT` request but you can change it with the `setParent` endpoint. You can create subtasks by using the subtasks endpoint.",
                "type": "object",
                "nullable": true,
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 1234
                  },
                  "name": {
                    "type": "string",
                    "example": "Bug task"
                  }
                },
                "readOnly": true,
                "example": [
                  {
                    "id": 1234,
                    "name": "Bug task"
                  }
                ]
              },
              "start_on": {
                "description": "Date on which this task is due, or null if the task has no start\ndate. This field takes a date with `YYYY-MM-DD` format.\n\n**Note:** `due_on` or `due_at` must be present in the request when\nsetting or unsetting the `start_on` parameter.",
                "type": "string",
                "nullable": true,
                "format": "date",
                "example": "2012-03-26"
              },
              "tags": {
                "description": "**Create-only**. Array of tags associated with this task. This property may be specified on creation using just an array of tag IDs.  In order to change tags on an existing task use `addTag` and `removeTag`.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Tag"
                },
                "example": [
                  {
                    "id": 59746,
                    "name": "Grade A"
                  }
                ]
              },
              "workspace": {
                "description": "*Create-only*. The workspace this task is associated with. Once created, task cannot be moved to a different workspace. This attribute can only be specified at creation time.",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 14916
                  },
                  "name": {
                    "type": "string",
                    "example": "My Workspace"
                  }
                },
                "example": [
                  {
                    "id": 14916,
                    "name": "My Workspace"
                  }
                ]
              }
            }
          }
        ]
      },
      "TaskObject": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Task"
          }
        }
      },
      "TaskArray": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          }
        }
      },
      "Team": {
        "description": "A *team* is used to group related projects and people together within an\norganization. Each project in an organization is associated with a team.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the team",
                "type": "string",
                "example": "Engineering"
              }
            }
          }
        ]
      },
      "TeamObject": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Team"
          }
        }
      },
      "TeamArray": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            }
          }
        }
      },
      "User": {
        "description": "A *user* object represents an account in Asana that can be given access\nto various workspaces, projects, and tasks.\n\nLike other objects in the system, users are referred to by numerical\nIDs. However, the special string identifier `me` can be used anywhere a\nuser ID is accepted, to refer to the current authenticated user.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "readOnly": true,
                "description": "The user\u2019s email address.",
                "example": "gsanchez@example.com"
              },
              "name": {
                "type": "string",
                "description": "**Read-only except when same user as requester**. The user\u2019s name.",
                "example": "Greg Sanchez"
              },
              "photo": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "image_21x21": {
                    "type": "string",
                    "format": "uri"
                  },
                  "image_27x27": {
                    "type": "string",
                    "format": "uri"
                  },
                  "image_36x36": {
                    "type": "string",
                    "format": "uri"
                  },
                  "image_60x60": {
                    "type": "string",
                    "format": "uri"
                  },
                  "image_128x128": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "readOnly": true,
                "description": "A map of the user\u2019s profile photo in various sizes, or null if no photo is set. Sizes provided are 21, 27, 36, 60, and 128. Images are in PNG format.",
                "example": {
                  "image_21x21": "https://...",
                  "image_27x27": "https://...",
                  "image_36x36": "https://...",
                  "image_60x60": "https://...",
                  "image_128x128": "https://..."
                }
              },
              "workspaces": {
                "description": "Workspaces and organizations this user may access.\nNote\\: The API will only return workspaces and organizations that also contain the authenticated user.",
                "readOnly": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            }
          }
        ]
      },
      "UserObject": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "UserArray": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserIdObject": {
        "description": "A user ID object for specification with the addUser/removeUser endpoints.",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "oneOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "me"
                    ]
                  },
                  {
                    "type": "string",
                    "format": "email"
                  }
                ],
                "example": 12345
              }
            }
          }
        }
      },
      "Webhook": {
        "description": "Webhooks allow an application to be notified of changes. This is in\naddition to the ability to fetch those changes directly as Events - in\nfact, Webhooks are just a way to receive\n[Events](https://asana.com/developers/api-reference/events) via HTTP POST\nat the time they occur instead of polling for them. For services\naccessible via HTTP this is often vastly more convenient, and if events\nare not too frequent can be significantly more efficient.\n\nIn both cases, however, changes are represented as Event objects - refer\nto the [Events\ndocumentation](https://asana.com/developers/api-reference/events) for\nmore information on what data these events contain.\n\n**Note**: While Webhooks send arrays of Event objects to their target,\nthe Event objects themselves contain *only IDs*, rather than the actual\nresource they are referencing. Webhooks themselves contain only the\ninformation necessary to deliver the events to the desired target as they\nare generated.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "active": {
                "description": "If true, the webhook will send events - if false it is considered inactive and will not generate events.",
                "type": "boolean",
                "example": false
              },
              "created_at": {
                "description": "The timestamp when the webhook was created.",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2012-02-22T02:06:58.147Z"
              },
              "last_failure_at": {
                "description": "The timestamp when the webhook last received an error when sending an event to the target.",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2012-02-22T02:06:58.147Z"
              },
              "last_failure_content": {
                "description": "The contents of the last error response sent to the webhook when attempting to deliver events to the target.",
                "type": "string",
                "readOnly": true,
                "example": "500 Server Error\\n\\nCould not complete the request"
              },
              "last_success_at": {
                "description": "The timestamp when the webhook last successfully sent an event to the target.",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2012-02-22T02:06:58.147Z"
              },
              "resource": {
                "description": "The resource the webhook is subscribed to.",
                "$ref": "#/components/schemas/AsanaNamedObject"
              },
              "target": {
                "description": "The URL to receive the HTTP POST.",
                "type": "string",
                "format": "uri",
                "readOnly": true,
                "example": "https://example.com/receive-webhook/7654"
              }
            }
          }
        ]
      },
      "WebhookEvent": {
        "type": "object",
        "properties": {
          "action": {
            "description": "The type of action taken that triggered the event.",
            "type": "string",
            "readOnly": true,
            "example": "changed"
          },
          "created_at": {
            "description": "The timestamp when the event occurred.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2012-02-22T02:06:58.147Z"
          },
          "parent": {
            "description": "For added/removed events, the parent ID that resource was added to or removed from. The parent will be `null` for other event types.",
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "example": 12345
          },
          "resource": {
            "description": "The resource ID the event occurred on.\n\n**Note**: The resource that triggered the event may be different from\nthe one that the events were requested for. For example, a\nsubscription to a project will contain events for tasks contained\nwithin the project.",
            "type": "integer",
            "readOnly": true,
            "example": 32154
          },
          "type": {
            "description": "The type of the resource that generated the event.\n\n**Note**: Currently, only tasks, projects and stories generate\nevents.",
            "type": "string",
            "readOnly": true,
            "example": "task"
          },
          "user": {
            "description": "The ID of the user who triggered the event.\n\n**Note**: The event may be triggered by a different user than the\nsubscriber. For example, if user A subscribes to a task and user B\nmodified it, the event\u2019s user will be user B. Note: Some events are\ngenerated by the system, and will have `null` as the user. API\nconsumers should make sure to handle this case.",
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "example": 321654987
          }
        }
      },
      "WebhookObject": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Webhook"
          }
        }
      },
      "WebhookArray": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            }
          }
        }
      },
      "Workspace": {
        "description": "A *workspace* is the highest-level organizational unit in Asana. All\nprojects and tasks have an associated workspace.\n\nAn *organization* is a special kind of workspace that represents a\ncompany. In an organization, you can group your projects into teams.\nYou can read more about how organizations work on the Asana Guide. To\ntell if your workspace is an organization or not, check its\n`is_organization` property.\n\nOver time, we intend to migrate most workspaces into organizations and\nto release more organization-specific functionality. We may eventually\ndeprecate using workspace-based APIs for organizations. Currently, and\nuntil after some reasonable grace period following any further\nannouncements, you can still reference organizations in any `workspace`\nparameter.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsanaObject"
          },
          {
            "type": "object",
            "properties": {
              "email_domains": {
                "description": "The email domains that are associated with this workspace.",
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                },
                "example": [
                  "asana.com"
                ]
              },
              "is_organization": {
                "description": "Whether the workspace is an *organization*.",
                "type": "boolean",
                "example": false
              },
              "name": {
                "description": "The name of the workspace.",
                "type": "string",
                "example": "My Favorite Workspace"
              }
            }
          }
        ]
      },
      "WorkspaceObject": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Workspace"
          }
        }
      },
      "WorkspaceArray": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Workspace"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "personalAccessToken": {
        "type": "http",
        "scheme": "bearer"
      },
      "oauth2": {
        "type": "oauth2",
        "description": "We require that applications designed to access the Asana API on behalf of multiple users implement OAuth 2.0.\nAsana supports both the Authorization Code Grant flow, and the Implicit Grant flows.",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://app.asana.com/-/oauth_authorize",
            "tokenUrl": "https://app.asana.com/-/oauth_token",
            "refreshUrl": "https://app.asana.com/-/oauth_token",
            "scopes": {}
          },
          "implicit": {
            "authorizationUrl": "https://app.asana.com/-/oauth_authorize",
            "refreshUrl": "https://api.getbase.com/oauth2/authorize",
            "scopes": {}
          }
        }
      }
    }
  },
  "paths": {
    "/attachments/{attachment-id}": {
      "parameters": [
        {
          "name": "attachment-id",
          "in": "path",
          "description": "Globally unique identifier for the attachment.",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "example": 12357
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get a single attachment.",
        "description": "Get the full record for a single attachment.",
        "tags": [
          "Attachments"
        ],
        "operationId": "getAttachment",
        "responses": {
          "200": {
            "description": "Successfully retrieved the record for a single attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/attachments": {
      "parameters": [
        {
          "name": "task-id",
          "in": "path",
          "description": "Globally unique identifier for the task.",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "example": 124816
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get all attachments for a task.",
        "description": "Returns the compact records for all attachments on the task.",
        "tags": [
          "Attachments"
        ],
        "operationId": "getAttachmentsForTask",
        "responses": {
          "200": {
            "description": "Successfully retrieved the compact records for all attachments on the task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Upload an attachment.",
        "description": "Upload an attachment.\n\nThis method uploads an attachment to a task and returns the compact\nrecord for the created attachment object. It is not possible to attach\nfiles from third party services such as Dropbox, Box & Google Drive via\nthe API. You must download the file content first and then upload it as\nany other attachment.\n\nThe 100MB size limit on attachments in Asana is enforced on this endpoint.\n\nThis endpoint expects a multipart/form-data encoded request containing\nthe full contents of the file to be uploaded.\n\nBelow is an example of what a well formed multipart/form-data encoded\nrequest might look like.\n\n```\nAuthorization: Basic <BASE64_ENCODED_API_KEY>\nContent-Type: multipart/form-data; boundary=<UNIQUE_BOUNDARY>\nUser-Agent: Java/1.7.0_76\nHost: localhost\nAccept: */*\nConnection: keep-alive\nContent-Length: 141\n```\n\n```\n--<UNIQUE_BOUNDARY>\nContent-Disposition: form-data; name=\"file\"; filename=\"example.txt\"\nContent-Type: text/plain\n```\n\n```\n<RAW_FILE_DATA>\n```\n\n```\n--<UNIQUE_BOUNDARY>--\n```\n\nRequests made should follow the HTTP/1.1 specification that line\nterminators are of the form `CRLF` or `\\r\\n` outlined\n[here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules)\nin order for the server to reliably and properly handle the request.",
        "tags": [
          "Attachments"
        ],
        "operationId": "uploadAttachmentToTask",
        "requestBody": {
          "description": "The file you want to upload.\n\n**Note when using curl:**\n\nBe sure to add an `\u2018@\u2019` before the file path, and use the `\u2014form`\noption instead of the `-d` option.\n\nWhen uploading PDFs with curl, force the content-type to be pdf by\nappending the content type to the file path: `\u2014form\n\u201cfile=@file.pdf;type=application/pdf\u201d`.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully uploaded the attachment to the task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/batch": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Submit multiple requests in parallel via the Batch API.",
        "description": "There are many cases where you want to accomplish a variety of work in\nthe Asana API but want to minimize the number of HTTP requests you make.\nFor example:\n\n* Modern browsers limit the number of requests that a single web page can\n  make at once.\n* Mobile apps will use more battery life to keep the cellular radio on\n  when making a series of requests.\n* There is an overhead cost to developing software that can make multiple\n  requests in parallel.\n* Some cloud platforms handle parallelism poorly, or disallow it\n  entirely.\n* To make development easier in these use cases, Asana provides a **batch\n  API** that enables developers to perform multiple \u201cactions\u201d by making\n  only a single HTTP request.\n\n**Making a Batch Request**\n\nTo make a batch request, send a `POST` request to `/batch`. Like other\n`POST` endpoints, the body should contain a `data` envelope. Inside this\nenvelope should be a single `actions` field, containing a list of\n\u201caction\u201d objects.  Each action represents a standard request to an\nexisting endpoint in the Asana API.\n\n**The maximum number of actions allowed in a single batch request is 10**.\nMaking a batch request with no actions in it will result in a `400 Bad\nRequest`.\n\nWhen the batch API receives the list of actions to execute, it will\ndispatch those actions to the already-implemented endpoints specified by\nthe `relative_path` and `method` for each action. This happens in\nparallel, so all actions in the request will be processed simultaneously.\nThere is no guarantee of the execution order for these actions, nor is\nthere a way to use the output of one action as the input of another\naction (such as creating a task and then commenting on it).\n\nThe response to the batch request will contain (within the `data`\nenvelope) a list of result objects, one for each action. The results are\nguaranteed to be in the same order as the actions in the request, e.g.,\nthe first result in the response corresponds to the first action in the\nrequest.\n\nThe batch API will always attempt to return a `200 Success` response with\nindividual result objects for each individual action in the request. Only\nin certain cases (such as missing authorization or malformed JSON in the\nbody) will the entire request fail with another status code. Even if\nevery individual action in the request fails, the batch API will still\nreturn a `200 Success` response, and each result object in the response\nwill contain the errors encountered with each action.\n\n**Rate Limiting**\n\nThe batch API fully respects all of our rate limiting. This means that a\nbatch request counts against *both* the standard rate limiter and the\nconcurrent request limiter as though you had made a separate HTTP request\nfor every individual action. For example, a batch request with five\nactions counts as five separate requests in the standard rate limiter,\nand counts as five concurrent requests in the concurrent request limiter.\nThe batch request itself incurs no cost.\n\nIf any of the actions in a batch request would exceed any of the enforced\nlimits, the *entire* request will fail with a `429 Too Many Requests`\nerror. This is to prevent the unpredictability of which actions might\nsucceed if not all of them could succeed.\n\n**Restrictions**\n\nNot every API endpoint can be accessed through the batch API.\nSpecifically, the following actions cannot be taken and will result in a\n`400 Bad Request` for that action:\n\n* Uploading attachments\n* Creating, getting, or deleting organization exports\n* Any SCIM operations\n* Nested calls to the batch API",
        "tags": [
          "Batch API"
        ],
        "operationId": "batchRequest",
        "requestBody": {
          "description": "The requests to batch together via the Batch API.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "actions": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/BatchRequest"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully completed the requested batch API operations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BatchResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/projects/{project-id}/custom_field_settings": {
      "parameters": [
        {
          "name": "project-id",
          "in": "path",
          "required": true,
          "description": "The ID of the project for which to list custom field settings.",
          "schema": {
            "type": "integer"
          },
          "example": 13579
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Query for all of the custom fields settings on a project.",
        "description": "Returns a list of all of the custom fields settings on a project, in compact form. Note that, as in all queries to collections which return compact representation, `opt_fields` and `opt_expand` can be used to include more data than is returned in the compact representation. See the [getting started guide on input/output options](https://asana.com/developers/documentation/getting-started/input-output-options) for more information.",
        "tags": [
          "Custom Field Settings"
        ],
        "operationId": "getCustomFieldSettingsForProject",
        "responses": {
          "200": {
            "description": "Successfully retrieved custom field settings objects for a project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldSettingsArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/custom_fields": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Create a new custom field in a workspace.",
        "description": "Creates a new custom field in a workspace. Every custom field is required\nto be created in a specific workspace, and this workspace cannot be\nchanged once set.\n\nA custom field\u2019s name must be unique within a workspace and not conflict\nwith names of existing task properties such as \u2018Due Date\u2019 or \u2018Assignee\u2019.\nA custom field\u2019s type must be one of \u2018text\u2019, \u2018enum\u2019, or \u2018number\u2019.\n\nReturns the full record of the newly created custom field.",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "createCustomField",
        "requestBody": {
          "description": "The custom field object to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CustomField"
                      },
                      {
                        "type": "object",
                        "required": [
                          "workspace"
                        ],
                        "properties": {
                          "workspace": {
                            "type": "integer",
                            "description": "The workspace to create a custom field in.",
                            "example": 1331
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Custom field successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/custom_fields/{custom-field-id}": {
      "parameters": [
        {
          "name": "custom-field-id",
          "in": "path",
          "required": true,
          "description": "Globally unique identifier for the custom field.",
          "schema": {
            "type": "integer"
          },
          "example": 124578
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the complete definition of a custom field\u2019s metadata.",
        "description": "Get the complete definition of a custom field\u2019s metadata.\n\nSince custom fields can be defined for one of a number of types, and\nthese types have different data and behaviors, there are fields that are\nrelevant to a particular type. For instance, as noted above, enum_options\nis only relevant for the enum type and defines the set of choices that\nthe enum could represent. The examples below show some of these\ntype-specific custom field definitions.\n\n**Get the metadata for a custom field of type \u2018text\u2019**\n\n```\n# Request\ncurl -H \"Authorization: Bearer <personal_access_token>\" \\\nhttps://app.asana.com/api/1.0/custom_fields/124578\n```\n\n```\n# Response\nHTTP/1.1 200\n{\n  \"data\": [\n    {\n      \"id\": 134679,\n      \"name\": \"Owner\",\n      \"description\": \"Person responsible for task\",\n      \"type\": \"text\"\n    }\n  ]\n}\n```\n\n**Get the metadata for a custom field of type \u2018number\u2019**\n\n```\n# Request\ncurl -H \"Authorization: Bearer <personal_access_token>\" \\\nhttps://app.asana.com/api/1.0/custom_fields/124578\n```\n\n```\n# Response\nHTTP/1.1 200\n{\n  \"data\": [\n    {\n      \"id\": 938271,\n      \"name\": \"Price\",\n      \"description\": \"In US Dollars\",\n      \"type\": \"number\",\n      \"precision\": 2\n    }\n  ]\n}\n```\n\n**Get the metadata for a custom field when that field is of type \u2018enum\u2019.**\n\n```\n# Request\ncurl -H \"Authorization: Bearer <personal_access_token>\" \\\nhttps://app.asana.com/api/1.0/custom_fields/124578\n```\n\n```\n# Response\nHTTP/1.1 200\n{\n  \"data\": [\n    {\n      \"id\": 124578,\n      \"name\": \"Priority\",\n      \"description\": \"Development team priority\",\n      \"type\": \"enum\",\n      \"enum_options\": [\n        {\n          \"id\": 789,\n          \"name\": \"Low\",\n          \"enabled\": true,\n          \"color\": \"blue\"\n        },\n        {\n          \"id\": 208,\n          \"name\": \"Medium\",\n          \"enabled\": false,\n          \"color\": \"yellow\"\n        },\n        {\n          \"id\": 439,\n          \"name\": \"High\",\n          \"enabled\": true,\n          \"color\": \"red\"\n        }\n      ]\n    }\n  ]\n}\n```",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "getCustomField",
        "responses": {
          "200": {
            "description": "Successfully retrieved the complete definition of a custom field\u2019s metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a custom field.",
        "description": "A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged\nWhen using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field.\nA custom field\u2019s `type` cannot be updated.\nAn enum custom field\u2019s `enum_options` cannot be updated with this endpoint. Instead see \u201cWork With Enum Options\u201d for information on how to update `enum_options`.\nReturns the complete updated custom field record.",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "updateCustomField",
        "requestBody": {
          "description": "The custom field object with all updated properties.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The custom field was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a custom field.",
        "description": "A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field.\nReturns an empty data record.",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "deleteCustomField",
        "responses": {
          "200": {
            "description": "The custom field was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/custom_fields/{custom-field-id}/enum_options": {
      "parameters": [
        {
          "name": "custom-field-id",
          "in": "path",
          "required": true,
          "description": "Globally unique identifier for the custom field.",
          "schema": {
            "type": "integer"
          },
          "example": 124578
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Creates an enum option.",
        "description": "Creates an enum option and adds it to this custom field\u2019s list of enum options. A custom field can have at most 50 enum options (including disabled options). By default new enum options are inserted at the end of a custom field\u2019s list.\nReturns the full record of the newly created enum option.",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "createCustomFieldEnumOption",
        "requestBody": {
          "description": "The enum option object to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnumOption"
                      },
                      {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "insert_before": {
                                "type": "integer",
                                "description": "An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.",
                                "example": 12345
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "insert_after": {
                                "type": "integer",
                                "description": "An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.",
                                "example": 12345
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Custom field enum option successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/EnumOption"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/custom_fields/{custom-field-id}/enum_options/insert": {
      "parameters": [
        {
          "name": "custom-field-id",
          "in": "path",
          "required": true,
          "description": "Globally unique identifier for the custom field.",
          "schema": {
            "type": "integer"
          },
          "example": 124578
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Reorder an enum in a custom field.",
        "description": "Moves a particular enum option to be either before or after another specified enum option in the custom field.",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "reorderCustomFieldEnum",
        "requestBody": {
          "description": "The enum option object to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EnumOption"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "enum_option": {
                            "type": "integer",
                            "description": "The ID of the enum option to relocate.",
                            "example": 97285
                          }
                        }
                      },
                      {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "before_enum_option": {
                                "type": "integer",
                                "description": "An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.",
                                "example": 12345
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "after_enum_option": {
                                "type": "integer",
                                "description": "An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.",
                                "example": 12345
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom field enum option successfully reordered.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/EnumOption"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/enum_options/{enum-option-id}": {
      "parameters": [
        {
          "name": "enum-option-id",
          "in": "path",
          "required": true,
          "description": "Globally unique identifier for the enum option.",
          "schema": {
            "type": "integer"
          },
          "example": 124578
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "put": {
        "summary": "Update an existing custom field enum option.",
        "description": "Updates an existing enum option. Enum custom fields require at least one enabled enum option.\nReturns the full record of the updated enum option.",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "updateCustomFieldEnum",
        "requestBody": {
          "description": "The enum option object to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/EnumOption"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the specified custom field enum.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/EnumOption"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/workspaces/{workspace-id}/custom_fields": {
      "parameters": [
        {
          "name": "workspace-id",
          "in": "path",
          "required": true,
          "description": "The workspace or organization to find custom field definitions in.",
          "schema": {
            "type": "integer"
          },
          "example": 1331
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get all of the custom fields in a workspace.",
        "description": "Returns a list of the compact representation of all of the custom fields in a workspace.",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "getCustomFieldsInWorkspace",
        "responses": {
          "200": {
            "description": "Successfully retrieved all custom fields for the given workspace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/events": {
      "parameters": [
        {
          "name": "resource",
          "in": "query",
          "required": true,
          "description": "A resource ID to subscribe to. The resource can be a task or project.",
          "schema": {
            "type": "integer"
          },
          "example": 12345
        },
        {
          "name": "sync",
          "in": "query",
          "required": false,
          "description": "A sync token received from the last request, or none on first sync. Events will be returned from the point in time that the sync token was generated.\n**Note**: On your first request, omit the sync token. The response will be the same as for an expired sync token, and will include a new valid sync token.If the sync token is too old (which may happen from time to time) the API will return a `412 Precondition Failed` error, and include a fresh sync token in the response.",
          "schema": {
            "type": "string"
          },
          "example": "de4774f6915eae04714ca93bb2f5ee81"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get events on a resource.",
        "description": "Returns the full record for all events that have occurred since the sync\ntoken was created.\n\nA GET request to the endpoint /[path_to_resource]/events can be made in\nlieu of including the resource ID in the data for the request.",
        "tags": [
          "Events"
        ],
        "operationId": "getEvents",
        "responses": {
          "200": {
            "description": "Successfully retrieved events.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/organization_exports": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Create a request to export an organization.",
        "description": "This method creates a request to export an Organization. Asana will complete the export at some point after you create the request.",
        "tags": [
          "Organization Exports"
        ],
        "operationId": "createOrganizationExport",
        "requestBody": {
          "description": "The organization to export.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "organization": {
                    "description": "Globally unique identifier for the workspace or organization.",
                    "type": "integer",
                    "example": 1331
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created organization export request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationExportObjectResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/organization_exports/{organization-export-id}": {
      "parameters": [
        {
          "name": "organization-export-id",
          "in": "path",
          "description": "Globally unique identifier for the organization export.",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "example": 133549
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the details of a previously-requested Organization export.",
        "description": "Returns details of a previously-requested Organization export.",
        "tags": [
          "Organization Exports"
        ],
        "operationId": "getOrganizationExport",
        "responses": {
          "200": {
            "description": "Successfully retrieved organization export object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationExportObjectResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/projects/{project-id}/project_memberships": {
      "parameters": [
        {
          "$ref": "#/components/parameters/project-path-id"
        },
        {
          "$ref": "#/components/parameters/user-query-param"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the compact project membership records for the project.",
        "description": "Returns the compact project membership records for the project.",
        "tags": [
          "Project Memberships"
        ],
        "operationId": "getProjectMembershipsForProject",
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested project's memberships.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMembershipArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/project_memberships/{project-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/project-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the complete project record for a single project membership.",
        "description": "Returns the complete project record for a single project membership.",
        "tags": [
          "Project Memberships"
        ],
        "operationId": "getProjectMembership",
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested project membership.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMembershipObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/projects": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Returns the project records for some filtered set of projects.",
        "description": "Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned.",
        "tags": [
          "Projects"
        ],
        "operationId": "getProjects",
        "parameters": [
          {
            "name": "workspace",
            "in": "query",
            "description": "The workspace or organization to filter projects on.",
            "schema": {
              "type": "integer"
            },
            "example": 1331
          },
          {
            "name": "team",
            "in": "query",
            "description": "The team to filter projects on.",
            "schema": {
              "type": "integer"
            },
            "example": 14916
          },
          {
            "$ref": "#/components/parameters/archived-query-param"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved projects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new project in a workspace or team.",
        "description": "Create a new project in a workspace or team.\n\nEvery project is required to be created in a specific workspace or\norganization, and this cannot be changed once set. Note that you can use\nthe `workspace` parameter regardless of whether or not it is an\norganization.\n\nIf the workspace for your project is an organization, you must also\nsupply a `team` to share the project with.\n\nReturns the full record of the newly created project.",
        "tags": [
          "Projects"
        ],
        "operationId": "createProject",
        "requestBody": {
          "description": "The project to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the project.",
                        "type": "string",
                        "example": "Bug Project"
                      },
                      "notes": {
                        "description": "The description of the project.",
                        "type": "string",
                        "example": "For tracking pesky bugs."
                      },
                      "workspace": {
                        "description": "The workspace or organization to create the project in.",
                        "type": "integer",
                        "example": 1331
                      },
                      "team": {
                        "description": "If creating in an organization, the specific team to create the project in.",
                        "type": "integer",
                        "example": 14916
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully retrieved projects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/projects/{project-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/project-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the complete project record for a single project.",
        "description": "Returns the complete project record for a single project.",
        "tags": [
          "Projects"
        ],
        "operationId": "getProject",
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a single project.",
        "description": "A specific, existing project can be updated by making a PUT request on\nthe URL for that project. Only the fields provided in the `data` block\nwill be updated; any unspecified fields will remain unchanged.\n\nWhen using this method, it is best to specify only those fields you wish\nto change, or else you may overwrite changes made by another user since\nyou last retrieved the task.\n\nReturns the complete updated project record.",
        "tags": [
          "Projects"
        ],
        "operationId": "updateProject",
        "requestBody": {
          "description": "The updated fields for the project.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a single project.",
        "description": "A specific, existing project can be deleted by making a DELETE request on\nthe URL for that project.\n\nReturns an empty data record.",
        "tags": [
          "Projects"
        ],
        "operationId": "deleteProject",
        "responses": {
          "200": {
            "description": "Successfully deleted the specified project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/projects/{project-id}/tasks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/project-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get all tasks within the given project.",
        "description": "Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.",
        "tags": [
          "Projects",
          "Tasks"
        ],
        "operationId": "getProjectTasks",
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested project's tasks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/projects/{project-id}/addCustomFieldSetting": {
      "parameters": [
        {
          "$ref": "#/components/parameters/project-path-id"
        },
        {
          "name": "custom_field",
          "in": "query",
          "description": "The custom field to associate with this project.",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "example": 14916
        },
        {
          "name": "is_important",
          "in": "query",
          "description": "Whether this field should be considered \"important\" to this project. This may cause it to be displayed more prominently, for example in the task grid.",
          "schema": {
            "type": "boolean"
          },
          "example": true
        },
        {
          "name": "insert_before",
          "in": "query",
          "description": "An id of a Custom Field Setting on this project, before which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.",
          "schema": {
            "type": "integer"
          },
          "example": 1331
        },
        {
          "name": "insert_after",
          "in": "query",
          "description": "An id of a Custom Field Setting on this project, after which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.",
          "schema": {
            "type": "integer"
          },
          "example": 1331
        },
        {
          "$ref": "#/components/parameters/pretty"
        }
      ],
      "post": {
        "summary": "Add a custom field to a project.",
        "description": "Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project.",
        "tags": [
          "Projects",
          "Custom Fields"
        ],
        "operationId": "project.addCustomFieldSetting",
        "responses": {
          "200": {
            "description": "Successfully added the custom field to the project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/projects/{project-id}/removeCustomFieldSetting": {
      "parameters": [
        {
          "$ref": "#/components/parameters/project-path-id"
        },
        {
          "name": "custom_field",
          "in": "query",
          "description": "The custom field to remove from this project.",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "example": 14916
        },
        {
          "$ref": "#/components/parameters/pretty"
        }
      ],
      "post": {
        "summary": "Remove a custom field from a project.",
        "description": "Removes a custom field setting from a project.",
        "tags": [
          "Projects",
          "Custom Fields"
        ],
        "operationId": "project.removeCustomFieldSetting",
        "responses": {
          "200": {
            "description": "Successfully removed the custom field from the project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/teams/{team-id}/projects": {
      "parameters": [
        {
          "$ref": "#/components/parameters/team-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the compact project records for all projects in the team.",
        "description": "Returns the compact project records for all projects in the team.",
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectsInTeam",
        "parameters": [
          {
            "$ref": "#/components/parameters/archived-query-param"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested team's projects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new project shared with the given team.",
        "description": "Creates a project shared with the given team.\n\nReturns the full record of the newly created project.",
        "tags": [
          "Projects"
        ],
        "operationId": "createProjectsWithTeam",
        "requestBody": {
          "description": "The new project to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the specified project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/workspaces/{workspace-id}/projects": {
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the compact project records for all projects in the workspace.",
        "description": "Returns the compact project records for all projects in the workspace.",
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectsInWorkspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/archived-query-param"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested workspace's projects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new project in the specified workspace.",
        "description": "Returns the compact project records for all projects in the workspace.\n\nIf the workspace for your project is an organization, you must also\nsupply a team to share the project with.\n\nReturns the full record of the newly created project.",
        "tags": [
          "Projects"
        ],
        "operationId": "createProjectsInWorkspace",
        "requestBody": {
          "description": "The new project to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a new project in the specified workspace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/projects/{project-id}/sections": {
      "parameters": [
        {
          "$ref": "#/components/parameters/project-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the compact records for all sections in the specified project.",
        "description": "Returns the compact records for all sections in the specified project.",
        "tags": [
          "Sections"
        ],
        "operationId": "getSectionsInProject",
        "responses": {
          "200": {
            "description": "Successfully retrieved sections in project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Creates a new section in a project.",
        "description": "Creates a new section in a project.\nReturns the full record of the newly created section.",
        "tags": [
          "Sections"
        ],
        "operationId": "createSectionInProject",
        "requestBody": {
          "description": "The section to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "description": "The project to create the section in",
                    "type": "integer",
                    "example": 13579
                  },
                  "name": {
                    "description": "The text to be displayed as the section name. This cannot be an empty string.",
                    "type": "string",
                    "example": "Next Actions"
                  }
                },
                "required": [
                  "project",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the specified section.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/sections/{section-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/section-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the complete record for a single section.",
        "description": "Returns the complete record for a single section.",
        "tags": [
          "Sections"
        ],
        "operationId": "getSection",
        "responses": {
          "200": {
            "description": "Successfully retrieved section.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a section.",
        "description": "A specific, existing section can be updated by making a PUT request on\nthe URL for that project. Only the fields provided in the `data` block\nwill be updated; any unspecified fields will remain unchanged. (note that\nat this time, the only field that can be updated is the `name` field.)\n\nWhen using this method, it is best to specify only those fields you wish\nto change, or else you may overwrite changes made by another user since\nyou last retrieved the task.\n\nReturns the complete updated section record.",
        "tags": [
          "Sections"
        ],
        "operationId": "updateSection",
        "requestBody": {
          "description": "The section to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SectionObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the specified section.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a section.",
        "description": "A specific, existing section can be deleted by making a DELETE request on\nthe URL for that section.\n\nNote that sections must be empty to be deleted.\n\nThe last remaining section in a board view cannot be deleted.\n\nReturns an empty data block.",
        "tags": [
          "Sections"
        ],
        "operationId": "deleteSection",
        "responses": {
          "200": {
            "description": "Successfully deleted the specified section.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/projects/{project-id}/sections/insert": {
      "parameters": [
        {
          "$ref": "#/components/parameters/project-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Move sections relative to each other in a board view.",
        "description": "Move sections relative to each other in a board view. One of\nbefore_section or after_section is required.\n\nSections cannot be moved between projects.\n\nAt this point in time, moving sections is not supported in list views,\nonly board views.\n\nReturns an empty data block.",
        "tags": [
          "Sections"
        ],
        "operationId": "moveSection",
        "requestBody": {
          "description": "The section's move action.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "description": "The project in which to reorder the given section.",
                    "type": "integer",
                    "example": 123456
                  },
                  "section": {
                    "description": "The section to reorder.",
                    "type": "integer",
                    "example": 321654
                  },
                  "before_section": {
                    "description": "Insert the given section immediately before the section specified by this parameter.",
                    "type": "integer",
                    "example": 86420
                  },
                  "after_section": {
                    "description": "Insert the given section immediately after the section specified by this parameter.",
                    "type": "integer",
                    "example": 987654
                  }
                },
                "required": [
                  "project",
                  "section",
                  "before_section",
                  "after_section"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully moved the specified section.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/stories": {
      "parameters": [
        {
          "name": "task-id",
          "in": "path",
          "required": true,
          "description": "The task to get stories from.",
          "schema": {
            "type": "integer"
          },
          "example": 321654
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the compact records for all stories on the task.",
        "description": "Returns the compact records for all stories on the task.",
        "tags": [
          "Stories",
          "Tasks"
        ],
        "operationId": "getTaskStories",
        "responses": {
          "200": {
            "description": "Successfully retrieved the specified task's stories.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoryArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Adds a comment to a task.",
        "description": "Adds a comment to a task. The comment will be authored by the currently\nauthenticated user, and timestamped when the server receives the\nrequest.\n\nReturns the full record for the new story added to the task.",
        "tags": [
          "Stories",
          "Tasks"
        ],
        "operationId": "createCommentStory",
        "requestBody": {
          "description": "The comment story to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task": {
                    "description": "Globally unique identifier for the task.",
                    "type": "integer",
                    "example": 123456
                  },
                  "text": {
                    "description": "The plain text of the comment to add.",
                    "type": "string",
                    "example": "This is a comment."
                  }
                },
                "required": [
                  "task",
                  "text"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a new story.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoryObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/stories/{story-id}": {
      "parameters": [
        {
          "name": "story-id",
          "in": "path",
          "required": true,
          "description": "The globally unique identifier for the story.",
          "schema": {
            "type": "integer"
          },
          "example": 1234
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Returns the full record for a single story.",
        "description": "Returns the full record for a single story.",
        "tags": [
          "Stories"
        ],
        "operationId": "getStory",
        "responses": {
          "200": {
            "description": "Successfully retrieved the specified story.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoryObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a story.",
        "description": "Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of text and html_text can be specified.",
        "tags": [
          "Stories"
        ],
        "operationId": "updateStory",
        "requestBody": {
          "description": "The comment story to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoryObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved the specified story.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoryObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tags": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get a set of tags.",
        "description": "Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.",
        "tags": [
          "Tags"
        ],
        "operationId": "queryTags",
        "parameters": [
          {
            "name": "workspace",
            "in": "query",
            "description": "The workspace to filter tags on.",
            "schema": {
              "type": "integer"
            },
            "example": 1331
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Only return tags whose `archived` field takes on the value of this parameter.",
            "schema": {
              "type": "boolean"
            },
            "example": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the specified set of tags.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Creates a new tag in a workspace or organization.",
        "description": "Creates a new tag in a workspace or organization.\n\nEvery tag is required to be created in a specific workspace or\norganization, and this cannot be changed once set. Note that you can use\nthe workspace parameter regardless of whether or not it is an\norganization.\n\nReturns the full record of the newly created tag.",
        "tags": [
          "Tags"
        ],
        "operationId": "createTag",
        "requestBody": {
          "description": "The tag to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the newly specified tag.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tags/{tag-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/tag-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get a single tag.",
        "description": "Returns the complete tag record for a single tag.",
        "tags": [
          "Tags"
        ],
        "operationId": "getTag",
        "responses": {
          "200": {
            "description": "Successfully retrieved the specified tag.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Updates the properties of a tag.",
        "description": "Updates the properties of a tag. Only the fields provided in the `data`\nblock will be updated; any unspecified fields will remain unchanged.\n\nWhen using this method, it is best to specify only those fields you wish\nto change, or else you may overwrite changes made by another user since\nyou last retrieved the task.\n\nReturns the complete updated tag record.",
        "tags": [
          "Tags"
        ],
        "operationId": "updateTag",
        "responses": {
          "200": {
            "description": "Successfully updated the specified tag.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tags/{tag-id}/tasks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/tag-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the compact task records for all tasks with the given tag.",
        "description": "Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.",
        "tags": [
          "Tags",
          "Tasks"
        ],
        "operationId": "getTagTasks",
        "responses": {
          "200": {
            "description": "Successfully retrieved the tasks associated with the specified tag.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/workspaces/{workspace-id}/tags": {
      "parameters": [
        {
          "name": "workspace-id",
          "in": "path",
          "description": "The workspace to filter tags on.",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "example": 1331
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get a set of tags in a single workspace.",
        "description": "Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.",
        "tags": [
          "Tags"
        ],
        "operationId": "queryAllTagsInWorkspace",
        "responses": {
          "200": {
            "description": "Successfully retrieved the specified set of tags.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new tag in a workspace or organization.",
        "description": "Creates a new tag in a workspace or organization.\n\nEvery tag is required to be created in a specific workspace or\norganization, and this cannot be changed once set. Note that you can use\nthe workspace parameter regardless of whether or not it is an\norganization.\n\nReturns the full record of the newly created tag.",
        "tags": [
          "Tags"
        ],
        "operationId": "createTagInWorkspace",
        "requestBody": {
          "description": "The tag to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved the specified set of tags.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Query for tasks.",
        "description": "Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.",
        "tags": [
          "Tasks"
        ],
        "operationId": "queryTasks",
        "parameters": [
          {
            "name": "assignee",
            "in": "query",
            "description": "The assignee to filter tasks on.\n**Note**: If you specify `assignee`, you must also specify the `workspace` to filter on.",
            "schema": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string",
                  "enum": [
                    "me"
                  ]
                },
                {
                  "type": "string",
                  "format": "email"
                }
              ]
            },
            "examples": {
              "id": {
                "summary": "A globally unique identifier for the user",
                "value": 14641
              },
              "me": {
                "summary": "The keyword 'me' to indicate the current user making the request.",
                "value": "me"
              },
              "email": {
                "summary": "An email address for a user",
                "value": "sashimi@asana.com"
              }
            }
          },
          {
            "name": "project",
            "in": "query",
            "description": "The project to filter tasks on.",
            "schema": {
              "type": "integer"
            },
            "example": 321654
          },
          {
            "name": "section",
            "in": "query",
            "description": "The section to filter tasks on.\n**Note**: Currently, this is only supported in board views.",
            "schema": {
              "type": "integer"
            },
            "example": 321654
          },
          {
            "name": "workspace",
            "in": "query",
            "description": "The workspace to filter tasks on.\n**Note**: If you specify `workspace`, you must also specify the `assignee` to filter on.",
            "schema": {
              "type": "integer"
            },
            "example": 321654
          },
          {
            "name": "completed_since",
            "in": "query",
            "description": "Only return tasks that are either incomplete or that have been completed since this time.",
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2012-02-22T02:06:58.158Z"
                },
                {
                  "type": "string",
                  "enum": [
                    "now"
                  ]
                }
              ]
            },
            "example": "2012-02-22T02:06:58.158Z"
          },
          {
            "name": "modified_since",
            "in": "query",
            "description": "Only return tasks that have been modified since the given time.\n\n**Note**: A task is considered \u201cmodified\u201d if any of its properties\nchange, or associations between it and other objects are modified\n(e.g.  a task being added to a project). A task is not considered\nmodified just because another object it is associated with (e.g. a\nsubtask) is modified. Actions that count as modifying the task\ninclude assigning, renaming, completing, and adding stories.",
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2012-02-22T02:06:58.158Z"
                },
                {
                  "type": "string",
                  "enum": [
                    "now"
                  ]
                }
              ]
            },
            "example": "2012-02-22T02:06:58.158Z"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved requested tasks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a task.",
        "description": "Creating a new task is as easy as POSTing to the `/tasks` endpoint with a\ndata block containing the fields you\u2019d like to set on the task. Any\nunspecified fields will take on default values.\n\nEvery task is required to be created in a specific workspace, and this\nworkspace cannot be changed once set. The workspace need not be set\nexplicitly if you specify `projects` or a `parent` task instead.\n\n`projects` can be a comma separated list of projects, or just a single\nproject the task should belong to.",
        "tags": [
          "Tasks"
        ],
        "operationId": "createTask",
        "requestBody": {
          "description": "The task to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a new task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the complete task record for a single task.",
        "description": "Returns the complete task record for a single task.",
        "tags": [
          "Tasks"
        ],
        "operationId": "getTask",
        "responses": {
          "200": {
            "description": "Successfully retrieved the specified task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a task.",
        "description": "A specific, existing task can be updated by making a PUT request on the\nURL for that task. Only the fields provided in the `data` block will be\nupdated; any unspecified fields will remain unchanged.\n\nWhen using this method, it is best to specify only those fields you wish\nto change, or else you may overwrite changes made by another user since\nyou last retrieved the task.\n\nReturns the complete updated task record.",
        "tags": [
          "Tasks"
        ],
        "operationId": "updateTask",
        "requestBody": {
          "description": "The task to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the specified task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a task.",
        "description": "A specific, existing task can be deleted by making a DELETE request on\nthe URL for that task. Deleted tasks go into the \u201ctrash\u201d of the user\nmaking the delete request. Tasks can be recovered from the trash within a\nperiod of 30 days; afterward they are completely removed from the system.\n\nReturns an empty data record.",
        "tags": [
          "Tasks"
        ],
        "operationId": "deleteTask",
        "responses": {
          "200": {
            "description": "Successfully deleted the specified task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/subtasks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get a subtask.",
        "description": "Returns a compact representation of all of the subtasks of a task.",
        "tags": [
          "Tasks"
        ],
        "operationId": "getSubTasks",
        "responses": {
          "200": {
            "description": "Successfully retrieved the specified task's subtasks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a subtask.",
        "description": "Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.",
        "tags": [
          "Tasks"
        ],
        "operationId": "createSubtask",
        "requestBody": {
          "description": "The new subtask to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the specified subtask.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/setParent": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Change the parent of a task.",
        "description": "Changes the parent of a task. Each task may only be a subtask of a single parent, or no parent task at all. Returns an empty data block.",
        "tags": [
          "Tasks"
        ],
        "operationId": "changeSubtaskParent",
        "requestBody": {
          "description": "The new parent of the subtask.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "parent": {
                        "description": "The new parent of the task, or `null` for no parent.",
                        "type": "integer",
                        "example": 987654
                      }
                    },
                    "required": [
                      "parent"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully changed the parent of the specified subtask.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/dependencies": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the dependencies for a task.",
        "description": "Returns the compact representations of all of the dependencies of a task.",
        "tags": [
          "Tasks"
        ],
        "operationId": "getTaskDependencies",
        "responses": {
          "200": {
            "description": "Successfully retrieved the specified task's dependencies.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/addDependencies": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Set dependencies for a given task.",
        "description": "Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 15 dependencies*.",
        "tags": [
          "Tasks"
        ],
        "operationId": "addTaskDependencies",
        "requestBody": {
          "description": "The list of tasks to set as dependencies.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DependencyArray"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully set the specified dependencies on the task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/removeDependencies": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Unlinks a set of dependencies from this task.",
        "description": "Unlinks a set of dependencies from this task.",
        "tags": [
          "Tasks"
        ],
        "operationId": "removeTaskDependencies",
        "requestBody": {
          "description": "The list of tasks to unlink as dependencies.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DependencyArray"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully unlinked the dependencies from the specified task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/dependents": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the dependents of a task.",
        "description": "Returns the compact representations of all of the dependents of a task.",
        "tags": [
          "Tasks"
        ],
        "operationId": "getTaskDependents",
        "responses": {
          "200": {
            "description": "Successfully retrieved the specified dependents of the task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/addDependents": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Set dependents for a given task.",
        "description": "Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents*.",
        "tags": [
          "Tasks"
        ],
        "operationId": "addTaskDependents",
        "requestBody": {
          "description": "The list of tasks to add as dependents.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DependentArray"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully set the specified dependents on the given task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/removeDependents": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Unlinks a set of dependents from this task.",
        "description": "Unlinks a set of dependents from this task.",
        "tags": [
          "Tasks"
        ],
        "operationId": "removeTaskDependents",
        "requestBody": {
          "description": "The list of tasks to remove as dependents.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DependentArray"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully unlinked the specified tasks as dependents.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/projects": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get all of the projects the task is in.",
        "description": "Returns a compact representation of all of the projects the task is in.",
        "tags": [
          "Tasks"
        ],
        "operationId": "getTaskProjects",
        "responses": {
          "200": {
            "description": "Successfully retrieved the projects for the given task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/addProject": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Adds the project to the specified task.",
        "description": "Adds the task to the specified project, in the optional location\nspecified. If no location arguments are given, the task will be added to\nthe end of the project.\n\n`addProject` can also be used to reorder a task within a project or\nsection that already contains it.\n\nAt most one of `insert_before`, `insert_after`, or `section` should be\nspecified. Inserting into a section in an non-order-dependent way can be\ndone by specifying section, otherwise, to insert within a section in a\nparticular place, specify `insert_before` or `insert_after` and a task\nwithin the section to anchor the position of this task.\n\nReturns an empty data block.",
        "tags": [
          "Tasks"
        ],
        "operationId": "addProjectToTask",
        "requestBody": {
          "description": "The project to add the task to.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "project": {
                        "description": "The project to add the task to.",
                        "type": "integer",
                        "example": 13579
                      },
                      "insert_after": {
                        "description": "A task in the project to insert the task after, or `null` to insert at the beginning of the list.",
                        "type": "integer",
                        "nullable": true,
                        "example": 124816
                      },
                      "insert_before": {
                        "description": "A task in the project to insert the task before, or `null` to insert at the end of the list.",
                        "type": "integer",
                        "nullable": true,
                        "example": 432134
                      },
                      "section": {
                        "description": "A section in the project to insert the task into. The task will be inserted at the bottom of the section.",
                        "type": "integer",
                        "nullable": true,
                        "example": 987654
                      }
                    },
                    "required": [
                      "project"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully added the specified project to the task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/removeProject": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Remove the project from the specified task.",
        "description": "Removes the task from the specified project. The task will still exist in\nthe system, but it will not be in the project anymore.\n\nReturns an empty data block.",
        "tags": [
          "Tasks"
        ],
        "operationId": "removeProjectFromTask",
        "requestBody": {
          "description": "The project to remove the task from.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "project": {
                        "description": "The project to remove the task from.",
                        "type": "integer",
                        "example": 13579
                      }
                    },
                    "required": [
                      "project"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully removed the specified project from the task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/tags": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get all of the tags for a given task.",
        "description": "Get a compact representation of all of the tags the task has.",
        "tags": [
          "Tasks"
        ],
        "operationId": "getTaskTags",
        "responses": {
          "200": {
            "description": "Successfully retrieved the tags for the given task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/addTag": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Adds a tag to a task",
        "description": "Adds a tag to a task. Returns an empty data block.",
        "tags": [
          "Tasks"
        ],
        "operationId": "addTagToTask",
        "requestBody": {
          "description": "The tag to add to the task.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "tag": {
                        "description": "The tag to add to the task.",
                        "type": "integer",
                        "example": 13579
                      }
                    },
                    "required": [
                      "tag"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully added the specified tag to the task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/removeTag": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Removes a tag from a task",
        "description": "Removes a tag from a task. Returns an empty data block.",
        "tags": [
          "Tasks"
        ],
        "operationId": "removeTagFromTask",
        "requestBody": {
          "description": "The tag to remove from the task.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "tag": {
                        "description": "The tag to remove from the task.",
                        "type": "integer",
                        "example": 13579
                      }
                    },
                    "required": [
                      "tag"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully removed the specified tag from the task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/addFollowers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Adds followers to a task.",
        "description": "Adds a tag to a task. Returns an empty data block.\nEach task can be associated with zero or more followers in the system.\nRequests to add/remove followers, if successful, will return the complete updated task record, described above.",
        "tags": [
          "Tasks"
        ],
        "operationId": "addFollowerToTask",
        "requestBody": {
          "description": "The tag to add to the task.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "followers": {
                        "description": "The tag to add to the task.",
                        "type": "array",
                        "items": {
                          "type": "integer"
                        },
                        "example": [
                          13579,
                          321654
                        ]
                      }
                    },
                    "required": [
                      "followers"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully added the specified tag to the task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/tasks/{task-id}/removeFollowers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/task-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Removes followers from a task.",
        "description": "Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.",
        "tags": [
          "Tasks"
        ],
        "operationId": "removeFollowerToTask",
        "requestBody": {
          "description": "The tag to remove to the task.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "followers": {
                        "description": "The tag to add to the task.",
                        "type": "array",
                        "items": {
                          "type": "integer"
                        },
                        "example": [
                          13579,
                          321654
                        ]
                      }
                    },
                    "required": [
                      "followers"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully removed the specified tag to the task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/sections/{section-id}/tasks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/section-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get all tasks in a given section.",
        "description": "**Board view only**: Returns the compact section records for all tasks within the given section.",
        "tags": [
          "Sections",
          "Tasks"
        ],
        "operationId": "getSectionTasks",
        "responses": {
          "200": {
            "description": "Successfully retrieved the section's tasks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/teams/{team-id}": {
      "parameters": [
        {
          "name": "team-id",
          "in": "path",
          "description": "Globally unique identifier for the team.",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "example": 14916
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get a single team.",
        "description": "Returns the full record for a single team.",
        "tags": [
          "Team"
        ],
        "operationId": "getTeam",
        "responses": {
          "200": {
            "description": "Successsfully retrieved the record for a single team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/organizations/{organization-id}/teams": {
      "parameters": [
        {
          "name": "organization-id",
          "in": "path",
          "description": "Globally unique identifier for the workspace or organization.",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "example": 1331
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the teams in an organization.",
        "description": "Returns the compact records for all teams in the organization visible to the authorized user.",
        "tags": [
          "Team"
        ],
        "operationId": "getAllTeams",
        "responses": {
          "200": {
            "description": "Returns the team records for all teams in the organization or workspace accessible to the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/users/{user-id}/teams": {
      "parameters": [
        {
          "name": "user-id",
          "in": "path",
          "description": "An identifier for the user. Can be one of an email address, the globally unique identifier for the user, or the keyword `me` to indicate the current user making the request.",
          "required": true,
          "schema": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "enum": [
                  "me"
                ]
              },
              {
                "type": "string",
                "format": "email"
              }
            ]
          },
          "examples": {
            "id": {
              "summary": "A globally unique identifier for the user",
              "value": 14641
            },
            "me": {
              "summary": "The keyword 'me' to indicate the current user making the request.",
              "value": "me"
            },
            "email": {
              "summary": "An email address for a user",
              "value": "sashimi@asana.com"
            }
          }
        },
        {
          "name": "organization-id",
          "in": "query",
          "description": "The workspace or organization to filter teams on.",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "example": 1331
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the given user's teams.",
        "description": "Returns the compact records for all teams to which the given user is assigned.",
        "tags": [
          "Team"
        ],
        "operationId": "getTeamsForUser",
        "responses": {
          "200": {
            "description": "Returns the team records for all teams in the organization or workspace to which the given user is assigned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/teams/{team-id}/users": {
      "parameters": [
        {
          "name": "team-id",
          "in": "path",
          "description": "A globally unique identifier for the team.",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "examples": {
            "id": {
              "summary": "A globally unique identifier for the team",
              "value": 14916
            }
          }
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the users in a given team",
        "description": "Returns the compact records for all users that are members of the team.",
        "tags": [
          "Team"
        ],
        "operationId": "getUsersForTeam",
        "responses": {
          "200": {
            "description": "Returns the user records for all the members of the team, including guests and limited access users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/teams/{team-id}/addUser": {
      "parameters": [
        {
          "name": "team-id",
          "in": "path",
          "description": "A globally unique identifier for the team.",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "examples": {
            "id": {
              "summary": "A globally unique identifier for the team",
              "value": 14916
            }
          }
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Add a user to a given team",
        "description": "The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.",
        "tags": [
          "Team"
        ],
        "operationId": "addUserToTeam",
        "requestBody": {
          "description": "The user to add to the team.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserIdObject"
              },
              "examples": {
                "id": {
                  "summary": "A globally unique identifier for the user",
                  "value": {
                    "user": 14641
                  }
                },
                "email": {
                  "summary": "An email address for a user",
                  "value": {
                    "user": "sashimi@asana.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the full user record for the added user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/teams/{team-id}/removeUser": {
      "parameters": [
        {
          "name": "team-id",
          "in": "path",
          "description": "A globally unique identifier for the team.",
          "required": true,
          "schema": {
            "type": "integer"
          },
          "examples": {
            "id": {
              "summary": "A globally unique identifier for the team.",
              "value": 14916
            }
          }
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Remove a user from a given team",
        "description": "The user making this call must be a member of the team in order to remove themselves or others.",
        "tags": [
          "Team"
        ],
        "operationId": "removeUserFromTeam",
        "requestBody": {
          "description": "The user to remove from the team.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserIdObject"
              },
              "examples": {
                "id": {
                  "summary": "A globally unique identifier for the user",
                  "value": {
                    "user": 14641
                  }
                },
                "email": {
                  "summary": "An email address for a user",
                  "value": {
                    "user": "sashimi@asana.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty data record",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/users": {
      "parameters": [
        {
          "name": "workspace",
          "in": "query",
          "description": "The workspace or organization ID to filter users on.",
          "schema": {
            "type": "integer"
          },
          "example": 1331
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get all users known to the authenticated user.",
        "description": "Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter.\nResults are sorted by user ID.",
        "tags": [
          "Users"
        ],
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested user records.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/users/{user-id}": {
      "parameters": [
        {
          "name": "user-id",
          "in": "path",
          "description": "An identifier for the user. Can be one of an email address, the globally unique identifier for the user, or the keyword `me` to indicate the current user making the request.",
          "required": true,
          "schema": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "enum": [
                  "me"
                ]
              },
              {
                "type": "string",
                "format": "email"
              }
            ]
          },
          "examples": {
            "id": {
              "summary": "A globally unique identifier for the user",
              "value": 14641
            },
            "me": {
              "summary": "The keyword 'me' to indicate the current user making the request.",
              "value": "me"
            },
            "email": {
              "summary": "An email address for a user",
              "value": "sashimi@asana.com"
            }
          }
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get a single Asana user",
        "description": "Returns the full user record for the single user with the provided ID.\nResults are sorted by user ID.",
        "tags": [
          "Users"
        ],
        "operationId": "getUser",
        "responses": {
          "200": {
            "description": "Returns the user specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/workspaces/{workspace-id}/users": {
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get all users in the specified workspace or organization.",
        "description": "Returns the user records for all users in the specified workspace or organization.\nResults are sorted alphabetically by user names.",
        "tags": [
          "Users"
        ],
        "operationId": "getUsersInWorkspace",
        "responses": {
          "200": {
            "description": "Return the users in the specified workspace or org.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/webhooks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get webhooks for a given app-workspace-user combination.",
        "description": "Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.",
        "tags": [
          "Webhooks"
        ],
        "operationId": "getWebhooks",
        "parameters": [
          {
            "name": "workspace",
            "in": "query",
            "required": true,
            "description": "The workspace to query for webhooks in.",
            "schema": {
              "type": "integer"
            },
            "example": 1331
          },
          {
            "name": "resource",
            "in": "query",
            "description": "Only return webhooks for the given resource.",
            "schema": {
              "type": "integer"
            },
            "example": 51648
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested webhooks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Establish a new webhook with a given resource.",
        "description": "Establishing a webhook is a two-part process. First, a simple HTTP POST\nsimilar to any other resource creation. Since you could have multiple\nwebhooks we recommend specifying a unique local id for each target.\n\nNext comes the confirmation handshake. When a webhook is created, we will\nsend a test POST to the target with an `X-Hook-Secret` header as\ndescribed in the [Resthooks Security\ndocumentation](http://resthooks.org/docs/security/). The target must\nrespond with a `200 OK` and a matching `X-Hook-Secret` header to confirm\nthat this webhook subscription is indeed expected.\n\nIf you do not acknowledge the webhook\u2019s confirmation handshake it will\nfail to setup, and you will receive an error in response to your attempt\nto create it. This means you need to be able to receive and complete the\nwebhook *while* the POST request is in-flight.\n\n```\n# Request\ncurl -H \"Authorization: Bearer <personal_access_token>\" \\\n-X POST https://app.asana.com/api/1.0/webhooks \\\n-d \"resource=8675309\" \\\n-d \"target=https://example.com/receive-webhook/7654\"\n```\n\n```\n# Handshake sent to https://example.com/\nPOST /receive-webhook/7654\nX-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81\n```\n\n```\n# Handshake response sent by example.com\nHTTP/1.1 200\nX-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81\n```\n\n```\n# Response\nHTTP/1.1 201\n{\n  \"data\": {\n    \"id\": 43214,\n    \"resource\": {\n      \"id\": 8675309,\n      \"name\": \"Bugs\"\n    },\n    \"target\": \"https://example.com/receive-webhook/7654\",\n    \"active\": false,\n    \"last_success_at\": null,\n    \"last_failure_at\": null,\n    \"last_failure_content\": null\n  }\n}\n```",
        "tags": [
          "Webhooks"
        ],
        "operationId": "createWebhook",
        "requestBody": {
          "description": "The webhook workspace and target.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "resource": {
                    "description": "A resource ID to subscribe to. The resource can be a task or project.",
                    "type": "integer",
                    "example": 12345
                  },
                  "target": {
                    "description": "The URL to receive the HTTP POST.",
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/receive-webhook/7654"
                  }
                },
                "required": [
                  "resource",
                  "target"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the requested webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/webhooks/{webhook-id}": {
      "parameters": [
        {
          "name": "webhook-id",
          "in": "path",
          "required": true,
          "description": "The webhook to affect with the current operation.",
          "schema": {
            "type": "integer",
            "example": 95784
          }
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get the full record for the given webhook.",
        "description": "Returns the full record for the given webhook.",
        "tags": [
          "Webhooks"
        ],
        "operationId": "getWebhook",
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Permanently remove a webhook.",
        "description": "This method permanently removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.",
        "tags": [
          "Webhooks"
        ],
        "operationId": "deleteWebhook",
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/workspaces": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get all workspaces visible to the authorized user.",
        "description": "Returns the compact records for all workspaces visible to the authorized user.",
        "tags": [
          "Workspaces"
        ],
        "operationId": "getAllWorkspaces",
        "responses": {
          "200": {
            "description": "Return all workspaces visible to the authorized user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/workspaces/{workspace-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Get a single workspace.",
        "description": "Returns the full workspace record for a single workspace.",
        "tags": [
          "Workspaces"
        ],
        "operationId": "getWorkspace",
        "responses": {
          "200": {
            "description": "Return the full workspace record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a workspace",
        "description": "A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged.\nCurrently the only field that can be modified for a workspace is its name.\nReturns the complete, updated workspace record.",
        "tags": [
          "Workspaces"
        ],
        "operationId": "updateWorkspace",
        "requestBody": {
          "description": "The workspace object with all updated properties.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update for the workspace was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/workspaces/{workspace-id}/typeahead": {
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace-path-id"
        },
        {
          "name": "type",
          "in": "query",
          "description": "The type of values the typeahead should return. You can choose from one of the following: `custom_field`, `project`, `tag`, `task`, and `user`. Note that unlike in the names of endpoints, the types listed here are in singular form (e.g. `task`). Using multiple types is not yet supported.",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "custom_field",
              "project",
              "tag",
              "task",
              "user"
            ]
          },
          "example": "user"
        },
        {
          "name": "query",
          "in": "query",
          "description": "The string that will be used to search for relevant objects. If an empty string is passed in, the API will currently return an empty result set.",
          "schema": {
            "type": "string"
          },
          "example": "Greg"
        },
        {
          "name": "count",
          "in": "query",
          "description": "The number of results to return. The default is 20 if this parameter is omitted, with a minimum of 1 and a maximum of 100. If there are fewer results found than requested, all will be returned.",
          "schema": {
            "type": "integer"
          },
          "example": 20
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "get": {
        "summary": "Retrieve objects via a typeahead search algorithm.",
        "description": "Retrieves objects in the workspace based via an auto-completion/typeahead\nsearch algorithm. This feature is meant to provide results quickly, so do\nnot rely on this API to provide extremely accurate search results. The\nresult set is limited to a single page of results with a maximum size, so\nyou won\u2019t be able to fetch large numbers of results.\n\nThe typeahead search API provides search for objects from a single\nworkspace. This endpoint should be used to query for objects when\ncreating an auto-completion/typeahead search feature. This API is meant\nto provide results quickly and should not be relied upon for accurate or\nexhaustive search results. The results sets are limited in size and\ncannot be paginated.\n\nQueries return a compact representation of each object which is typically\nthe id and name fields. Interested in a specific set of fields or all of\nthe fields?! Of course you are. Use field selectors to manipulate what\ndata is included in a response.",
        "tags": [
          "Workspaces",
          "Typeahead"
        ],
        "operationId": "getTypeahead",
        "responses": {
          "200": {
            "description": "Successfully retrieved objects via a typeahead search algorithm.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsanaObjectArray"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/workspaces/{workspace-id}/addUser": {
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Add a user to a workspace or organization.",
        "description": "Add a user to a workspace or organization.\nThe user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.",
        "tags": [
          "Workspaces"
        ],
        "operationId": "addUserToWorkspace",
        "requestBody": {
          "description": "The user to add to the workspace.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserIdObject"
              },
              "examples": {
                "id": {
                  "summary": "A globally unique identifier for the user",
                  "value": {
                    "user": 14641
                  }
                },
                "me": {
                  "summary": "The keyword 'me' to indicate the current user making the request.",
                  "value": {
                    "user": "me"
                  }
                },
                "email": {
                  "summary": "An email address for a user",
                  "value": {
                    "user": "sashimi@asana.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was added successfully to the workspace or organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/workspaces/{workspace-id}/removeUser": {
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace-path-id"
        },
        {
          "$ref": "#/components/parameters/pretty"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/expand"
        },
        {
          "$ref": "#/components/parameters/limit"
        },
        {
          "$ref": "#/components/parameters/offset"
        }
      ],
      "post": {
        "summary": "Remove a user from a workspace or organization.",
        "description": "Remove a user from a workspace or organization.\nThe user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address.\nReturns an empty data record.",
        "tags": [
          "Workspaces"
        ],
        "operationId": "removeUserToWorkspace",
        "requestBody": {
          "description": "The user to remove from the workspace.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserIdObject"
              },
              "examples": {
                "id": {
                  "summary": "A globally unique identifier for the user",
                  "value": {
                    "user": 14641
                  }
                },
                "me": {
                  "summary": "The keyword 'me' to indicate the current user making the request.",
                  "value": {
                    "user": "me"
                  }
                },
                "email": {
                  "summary": "An email address for a user",
                  "value": {
                    "user": "sashimi@asana.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was removed successfully to the workspace or organization.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    }
  }
}
